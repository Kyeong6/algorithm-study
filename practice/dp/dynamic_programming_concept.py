"""
- DP는 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향싱시키는 방법
- 이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장하여 다시 계산 x
- 일반적으로 Top-down, Bottom-up 두 가지 방식으로 구성

- 동적 계획법
     - 동적이란?
     - 자료구조에서 동적 할당은 '프롬그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법'
     - 반면에 다이나믹 프로그래밍에서 '다이나믹'은 별다른 의미 없이 사용된 단어

- 다이나믹 프로그래밍 조건
    - 최적 부분 구조
        - 큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결
    - 중복되는 부분 문제
        - 동일한 작은 문제를 반복적으로 해결

- 점화식 : 인접한 항들 사이의 관계식
    - Ex) an = an-1 + an-2 (피보나치 수열)
"""

# 피보나치 수열(재귀)
"""
이때 동일한 함수가 여러 번 호출: 비효율적
    - 지수 시간 복잡도
"""
def fibo(x):
    if x == 1 or x == 2:
        return 1
    return fibo(x-1) + fibo(x-2)

print(fibo(4))

"""
다이나믹 프로그래밍을 언제 쓸 수 있을까?를 확인하고 적용
- 최적 부분 구조 : 큰 문제를 작은 문제로 나누기
- 중복되는 부분 문제 : 동일한 작은 문제를 반복적으로 해결

피보나치 수열은 두 개 모두 적용됨
"""

"""
다이나믹 프로그래밍 문제에 접근하는 방법
- 주어진 문제가 다이나믹 프로그래밍 유형임을 파악하는 것이 중요
- 가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토
    - 다른 알고리즘으로 풀이 방법이 떠오르지 않으면 다이나기 프로그래밍 고려
- 일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면 코드 개선
- 일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제 출제 빈번
"""

