"""
파라메트릭 서치 : 최적화 문제를 결정 문제(예 / 아니오)로 바꾸어 해결하는 기법
    - 특정한 조건을 만족하는 가장 알맞은 값을 빠르게 찾는 최적화 문제
"""

"""
떡볶이 떡 만들기

떡볶이 떡의 길이가 일정하지 않음, 대신에 한 봉지 안에 들어가는 떡의 총길이는 맞춰줌
절단기에 높이(H)를 지정하면 줄지어진 떡을 한 번에 절단
예를 들어, 높이가 19,14,10,17cm인 떡, 절단기 높이 15cm로 지정하면 자른 뒤 떡의 높이는 
15,14,10,15cm가 됨. 잘린 떡의 길이는 4,0,0,2cm가 되어 손님은 6cm 길이 가져감
손님이 왔을 때 요청한 총 길이가 M일 때, 적어도 M만큼의 떡을 얻기 위해 절단기에 설정할 수 있는 높이의 최댓값 구하기

- 입력 조건
1. 첫째 줄에 떡의 개수 N과 요청한 떡의 길이 M이 주어짐(1<=N<=1,000,000, 1<=M<=2,000,000,000)
2. 둘째 줄에는 떡의 개별 높이가 주어짐. 떡 높이의 총합은 항상 M 이상이므로, 손님은 필요한 양만큼 떡을 사갈 수 있음

- 출력 조건
적어도 M만큼의 떡을 집에 가져가기 위해 절단기에 설정할 수 있는 높이의 최댓값 출력
"""

def binary_search(array, target, start, end):
    while (start <= end):
        sum = 0
        mid = (start+end) // 2

        for x in array:
            # 떡의 길이가 절단기 높이보다 길다
            if x > mid:
                sum += x - mid
        
        # 떡의 양이 부족한 경우 더 많이 자르기(왼쪽 부분 탐색)
        if sum < target:
            end = mid - 1
        
        # 떡의 양이 충분한 경우 덜 자르기(오른쪽 부분 탐색)
        else:
            result = mid
            start = mid + 1
        
    return result
            

# 입력 받기
n, m = map(int, input().split())
array = list(map(int, input().split()))

# 시작/끝 값 설정
start = 0
end = max(array)

# 결과 출력
print(binary_search(array, m, start, end))